create database mohirdev;

create extension pgcrypto;

create unique index username_inx on users(lower(username));

create unique index user_email_inx on users(user_email);


create table user_role (
    role_id int generated by default as identity primary key,
    role smallint
);

insert into user_role (role) values (0), (1), (2);  

create table users (
    user_id int generated by default as identity primary key,
    first_name varchar(20) not null,
    last_name varchar(20) not null,
    username varchar(32) not null,
    user_avatar varchar(128),
    user_email varchar(64),
    password varchar(128) not null,
    user_phone_number varchar(16),
    user_info text,
    facebook varchar(256),
    telegram varchar(256),
    linked_in varchar(256),
    instagram varchar(256),
    user_history varchar,
    role_id int not null references user_role(role_id),
    created_at timestamptz default current_timestamp
);

 

create table categories (
    category_id int generated by default as identity primary key,
    category_name varchar(128) not null,
    category_image varchar(128)  
);

'insert into categories(category_name) values ('frontend')'

create table courses (
    course_id int generated by default as identity primary key,
    course_name varchar(128) not null,
    course_info text,
    course_image varchar(128),
    course_lavel smallint,
    course_tags varchar(256),
    course_price decimal(10, 2) default 0,
    course_intro_video varchar,
    course_duration varchar(128),
    course_profit text,
    course_requirements text,
    course_for_who text,
    category_id int not null references categories(category_id),
    author_id int not null references users(user_id),
    created_at timestamptz default current_timestamp
);

-- ALTER TABLE courses
-- ADD author_id int not null references users(user_id)

create table course_author (
  course_author_id int generated by default as identity primary key,
  user_id int not null references users(user_id),
  course_id int not null references courses(course_id)
);

create table topics (
    topic_id int generated by default as identity primary key,
    topic_name varchar (128),
    course_id int not null references courses(course_id)
);

insert into topics (topic_name, course_id) values ('Asosiy tushunchalar', 3), ('2-bolim', 3);

create table videos (
    video_id int generated by default as identity primary key,
    video_name varchar(256) not null,
    video_link varchar not null,
    video_info text,
    video_material varchar(256),
    video_duration varchar(128),
    topic_id int not null references topics(topic_id)    
);

insert into videos (video_name, video_link, topic_id) values ('phyton tarixi', 'https://jdjdhhsjs', 1);

`select count(video_name) as videos, course_name from videos left join topics as t on videos.topic_id = t.topic_id left join courses on t.course_id = courses.course_id group by course_name`

create table purchases (
    purchas_id int generated by default as identity primary key,
    course_id int not null references courses(course_id),
    user_id int not null references users(user_id),
    created_at timestamptz default current_timestamp
);

'insert into purchases(course_id, user_id) values (13, 11), (13, 7);'

create table blogs (
    blog_id int generated by default as identity primary key,
    blog_title varchar not null,
    blog_content text not null,
    blog_image varchar(128) not null,
    user_id int not null references users(user_id),
    created_at timestamptz default current_timestamp
);


create table quiz (
   quiz_id int generated by default as identity primary key,
   quiz_title varchar(256),
   quiz_info text,
   video_id int not null references videos(video_id),
   topic_id int not null references topics(topic_id)
);

create table question_type (
    type_id int generated by default as identity primary key, 
    type smallint
);

create table questions (
   question_id int generated by default as identity primary key,
   question_text text not null,
   quiz_id int not null references quiz(quiz_id),
   type_id int not null references question_type(type_id) 
);

create table answers (
  answer_id int generated by default as identity primary key,
  answer_text text not null,
  is_correct boolean,
  question_id int not null references questions(question_id)
);

create table quiz_history (
    history_id int generated by default as identity primary key,
    user_id int not null references users(user_id),
    quiz_id int not null references quiz(quiz_id),
    question_id int not null references questions(question_id),
    answer_id int not null references answers(answer_id),
    created_at timestamptz default current_timestamp
);

create table comments (
    comment_id int generated by default as identity primary key,
    comment_content text not null,
    user_id int not null references users(user_id),
    course_id int not null references courses(course_id),
    created_at timestamptz default current_timestamp
);


-- // These were done

-- // POST: signup("/signup"), 
-- // POST: login("/login"), 
-- // POST: addCategory("/admin/category"), 
-- // DELETE: deleteCategory("/admin/category/id"), 
-- // POST: addTopic("/teacher/topic"), 
-- // DELETE: deleteTopic("/teacher/topic/id"), 
-- // POST: addCourse("/teacher/course"), 
-- // PUT: updateCourse("/teacher/course"), 
-- // POST: addAuthorsToCourse("/teacher/course/author"), 
-- // POST: addVideo("/teacher/video"), 
-- // DELETE: deleteVideo("/teacher/video/id"), 
-- // GET: allCategory("/categories"), 
-- // DELETE: deleteCouse("/teacher/course/:id"), 
-- // GET: Search("/search/course?:title"), 
-- // GET: allCourses("/courses"), 
-- // GET: coursesByCategory("/courses/category/id"), 
-- // Get: freeCoursesByCategory("/free/courses/category/id"), 
-- // Get: freeCourses("/free/courses"), 
-- // GET: myCourse("/users/mycourses/:userId"), 
-- // GET: filterCourses("/filter/courses?id=2&level=2&price=0"), 
-- // POST: commentAboutCourse("/users/course/comment")


--  22.09.2021
 
-- // GET: teacherPage("/teacher-page/id") 
-- // GET: itemCourse("/course/id"),

-- // these have to do 
-- // GET: userComments("/comments"),
-- // GET: allBlogs("/blogs"),
-- // GET: commentAboutCourse("/user/comment/:id"),

-- // GET: teacherPage("/user/teacher/:userId")

